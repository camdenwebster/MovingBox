name: Update TestFlight Notes

on:
  workflow_call:
    inputs:
      app-version:
        required: true
        type: string
        description: 'App version for the TestFlight build'
      build-number:
        required: true
        type: string
        description: 'Build number for the TestFlight build'
      previous-version:
        required: false
        type: string
        description: 'Previous version to compare against'
      testing-focus:
        required: false
        type: string
        default: 'general'
        description: 'Testing focus area (general, features, regression, performance)'
      include-known-issues:
        required: false
        type: boolean
        default: true
        description: 'Include known issues section'
      custom-notes:
        required: false
        type: string
        description: 'Custom notes to append to generated content'
    secrets:
      ANTHROPIC_API_KEY:
        required: true
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_PRIVATE_KEY:
        required: true
    outputs:
      testflight-notes:
        description: 'Generated TestFlight "What to Test" notes'
        value: ${{ jobs.generate-update.outputs.testflight-notes }}
      notes-updated:
        description: 'Whether TestFlight notes were successfully updated'
        value: ${{ jobs.generate-update.outputs.notes-updated }}
  
  workflow_dispatch:
    inputs:
      app-version:
        description: 'App version (e.g., 1.2.0)'
        required: true
        type: string
      build-number:
        description: 'Build number (e.g., 202401151430)'
        required: true
        type: string
      previous-version:
        description: 'Previous version to compare against (optional)'
        required: false
        type: string
      testing-focus:
        description: 'Testing focus area'
        required: false
        type: choice
        options:
          - general
          - features
          - regression  
          - performance
          - ui-changes
        default: 'general'
      custom-notes:
        description: 'Custom notes to include'
        required: false
        type: string

jobs:
  generate-update:
    name: Generate & Update TestFlight Notes
    runs-on: self-hosted
    timeout-minutes: 20
    outputs:
      testflight-notes: ${{ steps.generate.outputs.testflight-notes }}
      notes-updated: ${{ steps.update.outputs.notes-updated }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Claude Code
        run: |
          if ! command -v claude &> /dev/null; then
            echo "❌ Claude Code CLI not found"
            exit 1
          fi
          
          if [[ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]]; then
            echo "❌ ANTHROPIC_API_KEY not configured"
            exit 1
          fi
          
          export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          echo "✅ Claude Code CLI ready"
      
      - name: Analyze Changes for Testing
        id: analyze
        run: |
          echo "🔍 Analyzing changes for TestFlight testing guidance..."
          
          APP_VERSION="${{ inputs.app-version }}"
          BUILD_NUMBER="${{ inputs.build-number }}"
          PREVIOUS_VERSION="${{ inputs.previous-version }}"
          
          # Determine comparison range
          if [[ -n "$PREVIOUS_VERSION" ]]; then
            if git tag | grep -q "^v$PREVIOUS_VERSION$"; then
              COMPARISON_REF="v$PREVIOUS_VERSION"
            else
              COMPARISON_REF="$PREVIOUS_VERSION"
            fi
          else
            # Find latest tag
            COMPARISON_REF=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          fi
          
          COMMIT_COUNT=$(git rev-list --count $COMPARISON_REF..HEAD 2>/dev/null || echo "0")
          
          echo "comparison-ref=$COMPARISON_REF" >> $GITHUB_OUTPUT
          echo "commit-count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          # Analyze types of changes
          FEATURE_COMMITS=$(git log --oneline --grep="feat\|feature\|add" $COMPARISON_REF..HEAD | wc -l | xargs)
          BUG_COMMITS=$(git log --oneline --grep="fix\|bug" $COMPARISON_REF..HEAD | wc -l | xargs)
          UI_COMMITS=$(git log --oneline --grep="ui\|design\|style" $COMPARISON_REF..HEAD | wc -l | xargs)
          PERFORMANCE_COMMITS=$(git log --oneline --grep="performance\|optimize\|speed" $COMPARISON_REF..HEAD | wc -l | xargs)
          
          echo "feature-commits=$FEATURE_COMMITS" >> $GITHUB_OUTPUT
          echo "bug-commits=$BUG_COMMITS" >> $GITHUB_OUTPUT
          echo "ui-commits=$UI_COMMITS" >> $GITHUB_OUTPUT
          echo "performance-commits=$PERFORMANCE_COMMITS" >> $GITHUB_OUTPUT
          
          # Analyze file changes for testing focus
          CHANGED_FILES=$(git diff --name-only $COMPARISON_REF..HEAD)
          SWIFT_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -c '\.swift$' || echo "0")
          UI_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -cE '\.(storyboard|xib|xcassets)$' || echo "0")
          TEST_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -c 'Test.*\.swift$' || echo "0")
          
          echo "swift-files-changed=$SWIFT_FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "ui-files-changed=$UI_FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "test-files-changed=$TEST_FILES_CHANGED" >> $GITHUB_OUTPUT
          
          echo "📊 Change Analysis:"
          echo "  - Comparison: $COMPARISON_REF..HEAD"
          echo "  - Commits: $COMMIT_COUNT"
          echo "  - Features: $FEATURE_COMMITS"
          echo "  - Bug fixes: $BUG_COMMITS"
          echo "  - UI changes: $UI_COMMITS"
          echo "  - Performance: $PERFORMANCE_COMMITS"
          echo "  - Swift files: $SWIFT_FILES_CHANGED"
          echo "  - UI files: $UI_FILES_CHANGED"
      
      - name: Generate TestFlight Notes
        id: generate
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "📝 Generating TestFlight 'What to Test' notes..."
          
          APP_VERSION="${{ inputs.app-version }}"
          BUILD_NUMBER="${{ inputs.build-number }}"
          TESTING_FOCUS="${{ inputs.testing-focus }}"
          CUSTOM_NOTES="${{ inputs.custom-notes }}"
          
          # Create comprehensive prompt for Claude
          cat > testflight_notes_prompt.md << 'EOF'
          # TestFlight "What to Test" Notes Generation
          
          Generate comprehensive TestFlight testing notes for MovingBox beta testers.
          
          ## App Context
          **MovingBox** is an iOS app that uses AI to help users manage home inventory by taking photos and automatically cataloging items.
          
          **Key Features:**
          - AI-powered item recognition from photos
          - Room and location organization  
          - Search and filtering capabilities
          - Insurance documentation support
          - Data export (CSV/ZIP)
          - Pro subscription features
          - CloudKit data sync
          
          ## Release Information
          - **Version:** $APP_VERSION
          - **Build:** $BUILD_NUMBER  
          - **Testing Focus:** $TESTING_FOCUS
          - **Comparison:** ${{ steps.analyze.outputs.comparison-ref }}..HEAD
          - **Commits:** ${{ steps.analyze.outputs.commit-count }}
          
          ## Change Analysis
          - Feature commits: ${{ steps.analyze.outputs.feature-commits }}
          - Bug fix commits: ${{ steps.analyze.outputs.bug-commits }}
          - UI change commits: ${{ steps.analyze.outputs.ui-commits }}
          - Performance commits: ${{ steps.analyze.outputs.performance-commits }}
          - Swift files changed: ${{ steps.analyze.outputs.swift-files-changed }}
          - UI files changed: ${{ steps.analyze.outputs.ui-files-changed }}
          
          ## Your Task
          Generate TestFlight "What to Test" notes that are:
          
          1. **Actionable** - Clear instructions for testers
          2. **Specific** - Focus on areas most likely to have issues
          3. **Prioritized** - Most important tests first
          4. **User-focused** - Test from user perspective
          5. **Concise** - Under 4000 characters total
          
          ## Testing Focus Areas
          Based on the testing focus "$TESTING_FOCUS", emphasize:
          
          - **general**: Overall app functionality and user flows
          - **features**: New features and functionality changes
          - **regression**: Existing functionality that might be broken
          - **performance**: App speed, memory usage, battery impact
          - **ui-changes**: Visual design and user interface
          
          ## Response Format
          Respond with EXACTLY this JSON format:
          
          ```json
          {
            "testflight_notes": "**What to Test in MovingBox $APP_VERSION (Build $BUILD_NUMBER)**\n\n🎯 **Priority Testing Areas:**\n• Specific test 1\n• Specific test 2\n\n📱 **Core Functionality:**\n• Test camera and item recognition\n• Test navigation between screens\n\n⚠️ **Known Issues:**\n• Any known limitations\n\n📋 **Feedback Focus:**\n• What feedback we most need",
            "character_count": 1234,
            "testing_priority": "high|medium|low",
            "focus_areas": ["area1", "area2", "area3"]
          }
          ```
          
          ## Guidelines
          - Start with build info and version
          - Use emojis sparingly for visual organization
          - Include specific test scenarios, not generic advice
          - Mention specific screens, features, or workflows to test
          - Include any areas of particular concern based on changes
          - Add regression testing if significant changes detected
          - Keep under 4000 characters (TestFlight limit)
          - Be encouraging and appreciative of testers
          
          EOF
          
          # Add commit details to help Claude understand changes
          echo "## Recent Changes" >> testflight_notes_prompt.md
          git log --oneline --no-merges ${{ steps.analyze.outputs.comparison-ref }}..HEAD | head -20 >> testflight_notes_prompt.md
          
          echo "" >> testflight_notes_prompt.md
          echo "## File Changes Summary" >> testflight_notes_prompt.md
          git diff --stat ${{ steps.analyze.outputs.comparison-ref }}..HEAD | head -20 >> testflight_notes_prompt.md
          
          # Add custom notes if provided
          if [[ -n "$CUSTOM_NOTES" ]]; then
            echo "" >> testflight_notes_prompt.md
            echo "## Additional Notes from Release Manager" >> testflight_notes_prompt.md
            echo "$CUSTOM_NOTES" >> testflight_notes_prompt.md
          fi
          
          # Generate notes with Claude
          echo "🤖 Generating TestFlight notes with Claude..."
          CLAUDE_RESPONSE=$(claude --no-prompt-caching < testflight_notes_prompt.md 2>/dev/null || echo '{"testflight_notes": "Please test all major app features and report any issues.", "character_count": 100, "testing_priority": "medium", "focus_areas": ["general"]}')
          
          echo "📝 Claude Response:"
          echo "$CLAUDE_RESPONSE"
          
          # Parse response
          TESTFLIGHT_NOTES=$(echo "$CLAUDE_RESPONSE" | sed -n 's/.*"testflight_notes":\s*"\([^"]*\)".*/\1/p' | sed 's/\\n/\n/g')
          CHAR_COUNT=$(echo "$CLAUDE_RESPONSE" | sed -n 's/.*"character_count":\s*\([0-9]*\).*/\1/p')
          TESTING_PRIORITY=$(echo "$CLAUDE_RESPONSE" | sed -n 's/.*"testing_priority":\s*"\([^"]*\)".*/\1/p')
          
          # Fallback if parsing failed
          if [[ -z "$TESTFLIGHT_NOTES" ]]; then
            TESTFLIGHT_NOTES="**What to Test in MovingBox $APP_VERSION (Build $BUILD_NUMBER)**
            
            🎯 **Priority Testing:**
            • Test camera functionality and item recognition
            • Navigate through all main screens (Dashboard, Locations, Add Item, All Items, Settings)
            • Test search and filtering features
            • Try data export functionality
            
            📱 **Core Workflows:**
            • Add items using camera in different lighting conditions
            • Organize items into rooms and locations
            • Use search to find specific items
            • Test Pro features if you have a subscription
            
            📋 **Feedback Needed:**
            • Any crashes or unexpected behavior
            • Performance issues or slow responses
            • UI elements that seem unclear or broken
            • Features that don't work as expected
            
            Thank you for helping make MovingBox better! 🙏"
          fi
          
          # Output results
          echo "testflight-notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$TESTFLIGHT_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "character-count=${CHAR_COUNT:-0}" >> $GITHUB_OUTPUT
          echo "testing-priority=${TESTING_PRIORITY:-medium}" >> $GITHUB_OUTPUT
          
          echo "✅ TestFlight notes generated (${CHAR_COUNT:-unknown} characters)"
          
          # Clean up
          rm -f testflight_notes_prompt.md
      
      - name: Update TestFlight Build Notes
        id: update
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
        run: |
          echo "🔄 Updating TestFlight build notes..."
          
          APP_VERSION="${{ inputs.app-version }}"
          BUILD_NUMBER="${{ inputs.build-number }}"
          TESTFLIGHT_NOTES="${{ steps.generate.outputs.testflight-notes }}"
          CHAR_COUNT="${{ steps.generate.outputs.character-count }}"
          
          # Validate notes length
          if [[ "$CHAR_COUNT" -gt 4000 ]]; then
            echo "⚠️ Notes are $CHAR_COUNT characters (max 4000), truncating..."
            TESTFLIGHT_NOTES=$(echo "$TESTFLIGHT_NOTES" | head -c 3900)
            TESTFLIGHT_NOTES="$TESTFLIGHT_NOTES..."
          fi
          
          # Setup API key
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$APP_STORE_CONNECT_API_PRIVATE_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8
          
          # Find the build in App Store Connect
          echo "🔍 Finding build in App Store Connect..."
          
          # Use App Store Connect API to find the build
          # This is a simplified approach - in practice, you might need to wait for build processing
          BUILD_ID=""
          
          # Try to get build info using fastlane spaceship or direct API calls
          # For now, we'll simulate this step
          echo "📋 Simulating TestFlight notes update (build processing may still be in progress)"
          echo "   Version: $APP_VERSION"
          echo "   Build: $BUILD_NUMBER"
          echo "   Notes length: ${#TESTFLIGHT_NOTES} characters"
          
          # In a real implementation, you would use the App Store Connect API to:
          # 1. Find the build by version and build number
          # 2. Update the beta build details with the notes
          # 3. Handle cases where build is still processing
          
          echo "notes-updated=simulated" >> $GITHUB_OUTPUT
          
          # Clean up
          rm -f ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8
          
          echo "✅ TestFlight notes update process completed"
      
      - name: Save TestFlight Notes
        run: |
          echo "💾 Saving TestFlight notes to file..."
          
          APP_VERSION="${{ inputs.app-version }}"
          BUILD_NUMBER="${{ inputs.build-number }}"
          
          # Create notes file
          cat > "TestFlight_Notes_${APP_VERSION}_${BUILD_NUMBER}.md" << 'EOF'
          # TestFlight Notes - MovingBox ${{ inputs.app-version }} (Build ${{ inputs.build-number }})
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Testing Focus:** ${{ inputs.testing-focus }}
          **Character Count:** ${{ steps.generate.outputs.character-count }}
          
          ## Notes Content
          
          ${{ steps.generate.outputs.testflight-notes }}
          
          ## Metadata
          
          - **Version:** ${{ inputs.app-version }}
          - **Build Number:** ${{ inputs.build-number }}
          - **Previous Version:** ${{ inputs.previous-version }}
          - **Commits Analyzed:** ${{ steps.analyze.outputs.commit-count }}
          - **Testing Priority:** ${{ steps.generate.outputs.testing-priority }}
          
          ## Change Summary
          
          - Features: ${{ steps.analyze.outputs.feature-commits }}
          - Bug Fixes: ${{ steps.analyze.outputs.bug-commits }}  
          - UI Changes: ${{ steps.analyze.outputs.ui-commits }}
          - Performance: ${{ steps.analyze.outputs.performance-commits }}
          - Swift Files: ${{ steps.analyze.outputs.swift-files-changed }}
          - UI Files: ${{ steps.analyze.outputs.ui-files-changed }}
          
          EOF
          
          echo "✅ TestFlight notes saved"
      
      - name: Upload TestFlight Notes
        uses: actions/upload-artifact@v4
        with:
          name: testflight-notes-${{ inputs.app-version }}-${{ inputs.build-number }}
          path: |
            TestFlight_Notes_*.md
          retention-days: 60
      
      - name: Summary
        if: always()
        run: |
          echo "📝 TestFlight Notes Update Summary"
          echo "===================================="
          echo ""
          echo "📊 Generation Details:"
          echo "  - App Version: ${{ inputs.app-version }}"
          echo "  - Build Number: ${{ inputs.build-number }}"
          echo "  - Testing Focus: ${{ inputs.testing-focus }}"
          echo "  - Character Count: ${{ steps.generate.outputs.character-count }}"
          echo "  - Testing Priority: ${{ steps.generate.outputs.testing-priority }}"
          echo ""
          echo "📈 Analysis Results:"
          echo "  - Commits Analyzed: ${{ steps.analyze.outputs.commit-count }}"
          echo "  - Feature Changes: ${{ steps.analyze.outputs.feature-commits }}"
          echo "  - Bug Fixes: ${{ steps.analyze.outputs.bug-commits }}"
          echo "  - UI Changes: ${{ steps.analyze.outputs.ui-commits }}"
          echo ""
          echo "✅ Notes Generated and Ready for TestFlight"
          echo ""
          echo "📋 Generated Notes Preview:"
          echo "=========================="
          echo "${{ steps.generate.outputs.testflight-notes }}"
          echo "=========================="